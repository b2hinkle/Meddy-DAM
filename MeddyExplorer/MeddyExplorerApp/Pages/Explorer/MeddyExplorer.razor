@page "/meddy-explorer"
@using MeddyExplorerApp.Objects
@inject MeddyExplorerSessionInfo meddyExplorerSessionInfo

<MEACurrentDirTextField />
<MudTable T="FileSystemInfo" Items="@Items" Height="100%" FixedHeader="true" Dense="true" Hover="true" OnRowClick="@ItemRowClickEvent">
    <HeaderContent>
        <MudTh>
            <MudText Typo="@Typo.body1">
                Name
            </MudText>
        </MudTh>
        <MudTh>
            <MudText Typo="@Typo.body1">
                Date Modified
            </MudText>
        </MudTh>
        <MudTh>
            <MudText Typo="@Typo.body1">
                Type
            </MudText>
        </MudTh>
        <MudTh>
            <MudText Typo="@Typo.body1">
                Size
            </MudText>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">
            <MudIcon Icon="@GetFileSystemInfoIcon(context)" />
            <MudText Typo="@Typo.body1">
                @context.Name
            </MudText>
        </MudTd>
        <MudTd DataLabel="Date Modified">
            <MudText Typo="@Typo.body1">
                @context.LastWriteTime.ToString("yyyy-MM-dd hh-mm-ss")
            </MudText>
        </MudTd>
        <MudTd DataLabel="Type">
            <MudText Typo="@Typo.body1">
                @MELFileSystemFunctionLibrary.GetFileSystemInfoTypeString(context)
            </MudText>
        </MudTd>
        <MudTd DataLabel="Size">
            <MudText Typo="@Typo.body1">
                @MELFileSystemFunctionLibrary.GetFileSystemInfoSizeString(context)
            </MudText>
        </MudTd>
    </RowTemplate>
</MudTable>

@code
{
    private List<FileSystemInfo> Items = new List<FileSystemInfo>();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        RefreshExplorerView();
        meddyExplorerSessionInfo.OnCurrentDirChanged += OnCurrentDirChanged;
    }

    protected void RefreshExplorerView()
    {
        Items.Clear();

        string[] subfolderPaths = Directory.GetDirectories(meddyExplorerSessionInfo.CurrentDir.FullName);
        foreach (string subfolderPath in subfolderPaths)
        {
            Items.Add(new DirectoryInfo(subfolderPath));
        }

        string[] filePaths = Directory.GetFiles(meddyExplorerSessionInfo.CurrentDir.FullName);
        foreach (string filePath in filePaths)
        {
            Items.Add(new FileInfo(filePath));
        }
    }

    protected void OnCurrentDirChanged(DirectoryInfo inOldCurrentDir, DirectoryInfo inNewCurrentDir)
    {
        RefreshExplorerView();
        StateHasChanged();
    }

    protected void ItemRowClickEvent(TableRowClickEventArgs<FileSystemInfo> tableRowClickEventArgs)
    {
        DirectoryInfo folderInfo = tableRowClickEventArgs.Item as DirectoryInfo;
        if (folderInfo is not null)
        {
            meddyExplorerSessionInfo.CurrentDir = folderInfo;
        }
    }

    public static string GetFileSystemInfoIcon(FileSystemInfo inFileSystemInfo)
    {
        if (inFileSystemInfo is FileInfo)
        {
            return Icons.Material.Filled.InsertDriveFile;
        }

        if (inFileSystemInfo is DirectoryInfo)
        {
            return Icons.Material.Filled.Folder;
        }

        return string.Empty;
    }
}
