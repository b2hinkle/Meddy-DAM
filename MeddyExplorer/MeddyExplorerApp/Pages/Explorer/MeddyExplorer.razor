@page "/meddy-explorer"
@using MeddyExplorerApp.Objects
@inject MeddyExplorerSessionInfo meddyExplorerSessionInfo

<MEACurrentDirTextField />
<MudTable Items="@Items" FixedHeader="true" Dense="true" Hover="true" Breakpoint="@Breakpoint.Sm" OnRowClick="@ItemRowClickEvent" T="FileSystemInfo" LoadingProgressColor="@Color.Info">
    <HeaderContent>
        <MudTh>
            <MudText Typo="@Typo.body1">
                Name
            </MudText>
        </MudTh>
        <MudTh>
            <MudText Typo="@Typo.body1">
                Date Modified
            </MudText>
        </MudTh>
        <MudTh>
            <MudText Typo="@Typo.body1">
                Type
            </MudText>
        </MudTh>
        <MudTh>
            <MudText Typo="@Typo.body1">
                Size
            </MudText>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">
            @if (context is FileInfo)
            {
                <MudIcon Icon="@Icons.Material.Filled.InsertDriveFile" Title="File" />
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.Folder" Title="Folder" />
            }
            <MudText Typo="@Typo.body1">
                @context.Name
            </MudText>
        </MudTd>
        <MudTd DataLabel="Date Modified">
            <MudText Typo="@Typo.body1">
                @context.LastWriteTime
            </MudText>
        </MudTd>
        <MudTd DataLabel="Type">
            <MudText Typo="@Typo.body1">
                @MELFileSystemFunctionLibrary.GetFileSystemInfoTypeString(context)
            </MudText>
        </MudTd>
        <MudTd DataLabel="Size">
            <MudText Typo="@Typo.body1">
                @MELFileSystemFunctionLibrary.GetFileSystemInfoSizeString(context)
            </MudText>
        </MudTd>
    </RowTemplate>
</MudTable>

@code
{
    private List<FileSystemInfo> Items = new List<FileSystemInfo>();

    protected override void OnInitialized()
    {
        RefreshExplorerView();
        meddyExplorerSessionInfo.OnCurrentDirChanged += OnCurrentDirChanged;
    }

    protected void RefreshExplorerView()
    {
        Items.Clear();
        string[] subfoldersPaths = Directory.GetDirectories(meddyExplorerSessionInfo.CurrentDir.FullName);
        foreach (string subfolderPath in subfoldersPaths)
        {
            Items.Add(new DirectoryInfo(subfolderPath));
        }
        string[] filesPaths = Directory.GetFiles(meddyExplorerSessionInfo.CurrentDir.FullName);
        foreach (string filePath in filesPaths)
        {
            Items.Add(new FileInfo(filePath));
        }
    }

    protected void OnCurrentDirChanged(DirectoryInfo oldCurrentDir, DirectoryInfo newCurrentDir)
    {
        RefreshExplorerView();
        StateHasChanged();
    }

    private void ItemRowClickEvent(TableRowClickEventArgs<FileSystemInfo> tableRowClickEventArgs)
    {
        DirectoryInfo folderInfo = tableRowClickEventArgs.Item as DirectoryInfo;
        if (folderInfo is not null)
        {
            meddyExplorerSessionInfo.CurrentDir = folderInfo;
        }
    }
}
