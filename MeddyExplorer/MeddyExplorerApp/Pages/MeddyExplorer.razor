@page "/MeddyExplorer"
@using MeddyExplorerApp.Objects;
@inject MeddyExplorerSessionInfo meddyExplorerSessionInfo

<MudTable Items="@Items" FixedHeader="true" Dense="true" Hover="true" Breakpoint="Breakpoint.Sm" OnRowClick="@ItemRowClickEvent" T="FileSystemInfo" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Date Modified</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Size</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">
            @if (@context is FileInfo)
            {
                <MudIcon Icon="@Icons.Material.Filled.InsertDriveFile" Title="File" />
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.Folder" Title="Folder" />
            }
            @context.Name
        </MudTd>
        <MudTd DataLabel="Date Modified">@context.LastWriteTime</MudTd>
        <MudTd DataLabel="Type">@GetFileSystemInfoType(context)</MudTd>
        <MudTd DataLabel="Size">@GetFileSystemInfoSize(context)</MudTd>
    </RowTemplate>
</MudTable>

@code
{
    private List<FileSystemInfo> Items = new List<FileSystemInfo>();

    protected string GetFileSystemInfoSize(FileSystemInfo inFileSystemInfo)
    {
        FileInfo fileInfo = inFileSystemInfo as FileInfo;
        if (fileInfo is not null)
        {
            return fileInfo.Length.ToString();
        }

        DirectoryInfo directoryInfo = inFileSystemInfo as DirectoryInfo;
        if (directoryInfo is not null)
        {
            // Calculation for all the files in this folder
            string sizeInBytes = "";
            return sizeInBytes;
        }
        return "";
    }
    protected string GetFileSystemInfoType(FileSystemInfo inFileSystemInfo)
    {
        FileInfo fileInfo = inFileSystemInfo as FileInfo;
        if (fileInfo is not null)
        {
            return fileInfo.Extension;
        }
        return "Folder";
    }

    protected override void OnInitialized()
    {
        RefreshExplorerView();
        meddyExplorerSessionInfo.OnCurrentDirChanged += OnCurrentDirChanged;
    }

    protected void RefreshExplorerView()
    {
        Items.Clear();
        string[] subfoldersPaths = Directory.GetDirectories(meddyExplorerSessionInfo.CurrentDir.FullName);
        foreach (string subfolderPath in subfoldersPaths)
        {
            Items.Add(new DirectoryInfo(subfolderPath));
        }
        string[] filesPaths = Directory.GetFiles(meddyExplorerSessionInfo.CurrentDir.FullName);
        foreach (string filePath in filesPaths)
        {
            Items.Add(new FileInfo(filePath));
        }
    }

    protected void OnCurrentDirChanged(DirectoryInfo oldCurrentDir, DirectoryInfo newCurrentDir)
    {
        RefreshExplorerView();
        StateHasChanged();
    }

    private void ItemRowClickEvent(TableRowClickEventArgs<FileSystemInfo> tableRowClickEventArgs)
    {
        DirectoryInfo folderInfo = tableRowClickEventArgs.Item as DirectoryInfo;
        if (folderInfo is not null)
        {
            meddyExplorerSessionInfo.CurrentDir = folderInfo;
        }
    }
}
