@using MeddyExplorerApp.Objects
@inject MeddyExplorerSessionInfo meddyExplorerSessionInfo

<MudTable T="FileSystemInfo" Items="@Files" Height="100%" FixedHeader="true" Dense="true" Hover="true" OnRowClick="@ItemRowClickEvent">
    <HeaderContent>
        <MudTh>
            <MudText Typo="@Typo.body1">
                Name
            </MudText>
        </MudTh>
        <MudTh>
            <MudText Typo="@Typo.body1">
                Date Modified
            </MudText>
        </MudTh>
        <MudTh>
            <MudText Typo="@Typo.body1">
                Type
            </MudText>
        </MudTh>
        <MudTh>
            <MudText Typo="@Typo.body1">
                Size
            </MudText>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">
            <MudIcon Icon="@MELFileSystemFunctionLibrary.GetFileSystemInfoIcon(context)" />
            <MudText Typo="@Typo.body1">
                @MELFileSystemFunctionLibrary.GetFileSystemInfoNameString(context)
            </MudText>
        </MudTd>
        <MudTd DataLabel="Date Modified">
            <MudText Typo="@Typo.body1">
                @MELFileSystemFunctionLibrary.GetFileSystemInfoDateString(context)
            </MudText>
        </MudTd>
        <MudTd DataLabel="Type">
            <MudText Typo="@Typo.body1">
                @MELFileSystemFunctionLibrary.GetFileSystemInfoTypeString(context)
            </MudText>
        </MudTd>
        <MudTd DataLabel="Size">
            <MudText Typo="@Typo.body1">
                @MELFileSystemFunctionLibrary.GetFileSystemInfoSizeString(context)
            </MudText>
        </MudTd>
    </RowTemplate>
</MudTable>

@code
{
    protected List<FileSystemInfo> Files = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        MELFileSystemFunctionLibrary.PopulateFileSystemInfoList(Files, meddyExplorerSessionInfo.CurrentDir.FullName);
        meddyExplorerSessionInfo.OnCurrentDirChanged += OnCurrentDirChanged;
    }

    protected void OnCurrentDirChanged(DirectoryInfo inOldCurrentDir, DirectoryInfo inNewCurrentDir)
    {
        Files.Clear();
        MELFileSystemFunctionLibrary.PopulateFileSystemInfoList(Files, meddyExplorerSessionInfo.CurrentDir.FullName);

        StateHasChanged();
    }

    protected void ItemRowClickEvent(TableRowClickEventArgs<FileSystemInfo> tableRowClickEventArgs)
    {
        DirectoryInfo folder = tableRowClickEventArgs.Item as DirectoryInfo;
        if (folder is not null)
        {
            meddyExplorerSessionInfo.CurrentDir = folder;
        }
    }
}
