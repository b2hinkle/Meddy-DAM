@using MeddyExplorerApp.Services;
@inject MeddyExplorerService meddyExplorerService
@implements IDisposable

<MudTextField @ref="@TextField" T="string" Text="@meddyExplorerService.CurrentDir.FullName" Variant="@Variant.Outlined" Margin="@Margin.Dense" ValueChanged="@OnValueChanged" />

@code
{
    MudTextField<string> TextField { get; set; }

    protected override void OnInitialized()
    {
        meddyExplorerService.OnCurrentDirChangedDelegate += OnCurrentDirChange;
    }

    public void OnCurrentDirChange(DirectoryInfo inOldCurrentDir, DirectoryInfo inNewCurrentDir)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        meddyExplorerService.OnCurrentDirChangedDelegate -= OnCurrentDirChange;
    }

    protected async Task OnValueChanged(string inNewValue)
    {
        if (Directory.Exists(inNewValue))
        {
            meddyExplorerService.CurrentDir = new DirectoryInfo(inNewValue);
            if (TextField is not null)
            {
                await TextField.Clear();
                await TextField.BlurAsync();
            }
        }

    }
}
