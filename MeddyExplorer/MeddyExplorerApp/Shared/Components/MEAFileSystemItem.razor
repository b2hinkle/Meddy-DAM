@using MudBlazor.Utilities
@using Services
@inject MeddyExplorerState meddyExplorerState
@implements IDisposable

<MudButton Class="@BuildClass()" OnClick="@OnClick" @ondblclick=@OnDblClick @onkeydown=@OnKeyDown>
    @ChildContent
</MudButton>

@code
{
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string Class { get; set; }

    protected string BuildClass()
    {
        return new CssBuilder()
            .AddClass(Class)
            .AddClass("mbel-hover-transition-duration-none") // give responsive hover feedback
            .AddClass("mae-file-system-item-selected", Selected) // add selected class when selected
            .Build();
    }

    [Parameter]
    public FileSystemInfo FileSystemInfo { get; set; }

    [Parameter]
    public EventCallback OnSelect { get; set; }

    [Parameter]
    public EventCallback OnDeselect { get; set; }

    [Parameter]
    public EventCallback OnOpen { get; set; }

    /// <summary>
    /// Cached value of whether we are selected or not.
    /// </summary>
    protected bool Selected { get; set; } = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Selected = meddyExplorerState.GetSelectedFiles().Contains(FileSystemInfo);

        meddyExplorerState.OnFileSelected += OnFileSelected;
        meddyExplorerState.OnFileDeselected += OnFileDeselected;
    }

    protected void OnFileSelected(object sender, FileSystemInfo inFileSystemInfo)
    {
        if (inFileSystemInfo == FileSystemInfo)
        {
            // We have been selected, update ourselves
            Selected = true;
            OnSelect.InvokeAsync();
            StateHasChanged();
        }
    }

    protected void OnFileDeselected(object sender, FileSystemInfo inFileSystemInfo)
    {
        if (inFileSystemInfo == FileSystemInfo)
        {
            // We have been deselected, update ourselves
            Selected = false;
            OnDeselect.InvokeAsync();
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        meddyExplorerState.OnFileSelected -= OnFileSelected;
        meddyExplorerState.OnFileDeselected -= OnFileDeselected;
    }

    protected void Select()
    {
        meddyExplorerState.AddToSelectedFiles(FileSystemInfo);
    }

    protected void Deselect()
    {
        meddyExplorerState.RemoveFromSelectedFiles(FileSystemInfo);
    }

    protected void ToggleSelected()
    {
        if (!Selected)
        {
            Select();
        }
        else
        {
            Deselect();
        }
    }

    protected void Open()
    {
        FileInfo fileToOpen = FileSystemInfo as FileInfo;
        if (fileToOpen is not null)
        {
            // Process.Start()
        }

        DirectoryInfo directoryToOpen = FileSystemInfo as DirectoryInfo;
        if (directoryToOpen is not null)
        {
            meddyExplorerState.CurrentDir = directoryToOpen;
        }

        OnOpen.InvokeAsync();
    }

    protected void OnClick(MouseEventArgs e)
    {
        if (e.CtrlKey && e.ShiftKey)
        {
            return;
        }

        if (e.CtrlKey)
        {
            ToggleSelected();
            return;
        }

        if (e.ShiftKey)
        {
            return;
        }

        // Default exclusive select
        meddyExplorerState.ClearSelectedFiles();
        Select();
    }

    protected void OnDblClick(MouseEventArgs e)
    {
        Open();
    }

    protected void OnKeyDown(KeyboardEventArgs e)
    {

    }
}
