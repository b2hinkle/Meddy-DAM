@using MudBlazor.Utilities
@using Services
@inject MeddyExplorerState meddyExplorerState

<MudButton Class="@BuildClass()" OnClick="@((inMouseEventArgs) => ToggleSelect())" @ondblclick=@((inMouseEventArgs) => Open())>
    @ChildContent
</MudButton>

@code
{
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public FileSystemInfo FileSystemInfo { get; set; }

    protected string BuildClass()
    {
        return new CssBuilder()
            .AddClass(Class)
            .AddClass("mbel-hover-transition-duration-none") // give responsive hover feedback
            .AddClass("mae-file-system-item-selected", Selected) // add selected class when selected
            .Build();
    }

    // TODO: Make this a public parameter
    protected bool Selected { get; set; } = false;

    [Parameter]
    public EventCallback OnSelect { get; set; }

    [Parameter]
    public EventCallback OnDeselect { get; set; }

    [Parameter]
    public EventCallback OnOpen { get; set; }

    protected async Task Select()
    {
        meddyExplorerState.AddToSelectedFiles(FileSystemInfo);

        await OnSelect.InvokeAsync();
    }

    protected async Task Deselect()
    {
        meddyExplorerState.RemoveFromSelectedFiles(FileSystemInfo);

        await OnDeselect.InvokeAsync();
    }

    protected async Task ToggleSelect()
    {
        Selected = !Selected;

        if (Selected)
        {
            await Select();
        }
        else
        {
            await Deselect();
        }
    }

    protected async Task Open()
    {
        FileInfo fileToOpen = FileSystemInfo as FileInfo;
        if (fileToOpen is not null)
        {
            // Process.Start()
        }

        DirectoryInfo directoryToOpen = FileSystemInfo as DirectoryInfo;
        if (directoryToOpen is not null)
        {
            meddyExplorerState.CurrentDir = directoryToOpen;
        }

        await OnOpen.InvokeAsync();
    }
}
